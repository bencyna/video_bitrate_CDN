#!/usr/bin/env python3
import threading
from socket import *
import sys
import re
import time

def getServerMessageChunkSize(server_message):
    decoded_server_message = server_message.decode('iso-8859-1')
    chunk_size = getStringFromHeader(decoded_server_message, r'Content-Length: (\d+)')
    return chunk_size
  
def getThroughput(downloadTimeEnd, downloadTimeStart, server_message):
    chunk_size_bits = int(getServerMessageChunkSize(server_message)) // 8
    duration = downloadTimeEnd - downloadTimeStart
    throughput = int(chunk_size_bits) / duration
    return throughput

def logContents(client_header, server_message, log_file_path, downloadTimeStart):
    # <time> <duration> <server-ip> <chunkname> <chunk-size>
    try:
        current_time = time.time()
        duration = current_time - downloadTimeStart
        # server_ip = getStringFromHeader(decoded_server_message, r'Host: ([\w\.-]+)')
        server_ip = "3.0.0.1"
        chunk_name = getStringFromHeader(client_header, r'GET /(.+?) HTTP')
        chunk_size = getServerMessageChunkSize(server_message)
        
        with open(log_file, "a") as f:
            f.write(f"{current_time} {duration} {server_ip} /{chunk_name} {chunk_size}\n")
            f.close()
    except Exception as e: 
        print("Error logging contents:", e)
        # print("Server message:", decoded_server_message)
        # print("header client message:", client_header)

def closeConnections(clientSocket, serverSocket):
    clientSocket.close()
    serverSocket.close()
    print("Closed connections")
    
def sendMessage(message, socket):
    if isinstance(message, str):
        message = message.encode()
    socket.sendall(message)

def receiveMessageHeader(socket):
    # use a bytearray to store the encoded message
    buffer = bytearray()
    while True:
        chunk = socket.recv(1024)
        if not chunk:
            break
        buffer.extend(chunk)
        # find the end of the header 
        if b'\r\n\r\n' in buffer:
            break
    
    # get the first occurance of the header end and include that in our header message
    header_end = buffer.find(b'\r\n\r\n') + 4
    headers = buffer[:header_end]
    remaining_body = buffer[header_end:]
    
    # decode the headers
    headers_str = headers.decode('iso-8859-1')
    
    return headers_str, remaining_body

def getStringFromHeader(headers, string):
    match = re.search(string, headers, re.IGNORECASE)
    if match:
        return match.group(1)
    return None

def getContentLength(headers):
    match = re.search(r'Content-Length: (\d+)', headers, re.IGNORECASE)
    if match:
        return int(match.group(1))
    return None

def receiveMessageServer(socket):
    headers_str, initial_body = receiveMessageHeader(socket)
    
    # encode the headers 
    response = headers_str.encode('iso-8859-1')
    body = initial_body
    
    content_length = getContentLength(headers_str)
    
    if content_length is not None:
        # Keep receiving until we get the full content length
        remaining = content_length - len(initial_body)
        while remaining > 0:
            chunk = socket.recv(min(remaining, 8192))
            if not chunk:
                break
            body += chunk
            remaining -= len(chunk)
            
    # otherwise we have the full message
    
    # Combine headers and body
    full_response = response + body
    return full_response, response

def connectToServer(fake_ip, server_ip):
    serverSocket = socket(AF_INET, SOCK_STREAM)
    serverSocket.bind((fake_ip, 80))
    serverSocket.connect((server_ip, 80))
    print("Connected to server")
    return serverSocket

def runProxy(clientSocket, serverSocket, log_file, current_throughput = -1):
    try:
        while True:
            # Receive message from the client
            header, _ = receiveMessageHeader(clientSocket)
            if not header:
                # Client closed connection
                closeConnections(clientSocket, serverSocket)
                
            # Forward message to server
            downloadTimeStart = time.time()
            sendMessage(header, serverSocket)
        
            # Receive messages from server and forward to client
            server_message, server_header = receiveMessageServer(serverSocket)
            if not server_message:
                break
              
            # received messgae from server
            downloadTimeEnd = time.time()
            current_throughput = getThroughput(downloadTimeEnd, downloadTimeStart, server_message)
            print(f"Throughput: {current_throughput} bits/sec")
                
            # foward the message to the client
            sendMessage(server_message, clientSocket)
            logContents(header, server_header, log_file, downloadTimeStart)
            
    except Exception as e:
        print(f"Error in proxy: {e}")
    finally:
        closeConnections(clientSocket, serverSocket)


def handle_client(clientSocket, log_file, fake_ip):
    try:
        serverSocket = connectToServer(fake_ip, server_ip)
        runProxy(clientSocket, serverSocket, log_file)
        
    except Exception as e:
        print(f"Error handling client: {e}")
        closeConnections(clientSocket, serverSocket)

if __name__ == "__main__":
    if len(sys.argv) != 7:
        print("Usage: python3", sys.argv[0], "<topo_dir>", "<log>", "alpha", "<listen-port>", "<fake-ip>", "<dns-server-ip>")
        sys.exit()
        
    topo_dir = str(sys.argv[1])
    log_file = str(sys.argv[2])
    alpha = float(sys.argv[3])
    listen_port = int(sys.argv[4])    
    fake_ip = '3.0.0.1'  
    server_ip = "3.0.0.1"
    print("topo_dir:", topo_dir, "log_file:", log_file, "alpha:", alpha, "listen_port:", listen_port, "fake_ip:", fake_ip, "dns_server_ip:", server_ip)

    proxySocket = socket(AF_INET, SOCK_STREAM)
    proxySocket.bind(("", listen_port))
    proxySocket.listen(5)
    
    # make sure log file is empty and exists
    with open(log_file, "w") as f:
        f.close()
      
    try:
        while True:
            client_socket, client_address = proxySocket.accept()
            print(f"Client connected, starting thread")
            threading.Thread(target=handle_client, args=(client_socket, log_file, fake_ip)).start()
    except KeyboardInterrupt:
        print("\nShutting down proxy server...")
    finally:
        proxySocket.close()