#!/usr/bin/env python3
import threading

from socket import *
import sys

def connectToClient(proxySocket, fake_ip, server_ip):
    # while client is connected, listen for a message from the client
    clientSocket, client_address = proxySocket.accept()
    print("Accepted client")
    
    # bind to a server
    serverSocket = socket(AF_INET, SOCK_STREAM)
    serverSocket.bind((fake_ip, 0))
    
    # connect to the server
    serverSocket.connect((server_ip, 80))
    print("Connected to server")
    
    return clientSocket, serverSocket

def handle_client(client_socket, log_file, proxy_socket, fake_ip):
    # write to log file
    f = open(log_file, "a")
    f.write("Client opened connection\n")
    # establish connection to recieve messages from the client
    clientSocket, serverSocket = connectToClient(proxySocket, fake_ip, server_ip)
    
    
    # establish connection to the server
    
    # receive message from the client, forwarded to server
    
    # receive messages from server 
    # log the messages in format <time> <duration> <server-ip> <chunkname> <chunk-size>
    
    # send messages to the client
    
    # repeat 
    
    # if the client closes the connection, close the connection, close the file and return
    pass

if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python3", sys.argv[0], "<log>", "<listen-port>", "<fake-ip>", "<server-ip>")
        sys.exit()
        
    log_file = str(sys.argv[1])
    listen_port = int(sys.argv[2])    
    fake_ip = str(sys.argv[3])    
    server_ip = str(sys.argv[4])    
    print("log path: ", log_file, "Listen Port:", listen_port, "Fake IP:", fake_ip, "Server IP:", server_ip)

    proxySocket = socket(AF_INET, SOCK_STREAM)

    proxySocket.bind(("", listen_port))

    # TODO set up connection to client and server
    proxySocket.listen(1)
    
    # setup server connection to apache server

    # continuously listen for client
    while True:
        client_socket, client_address = proxySocket.accept()
        print(f"Connection from {client_address}")
        # Spin up a new thread to handle the client
        threading.Thread(target=handle_client, args=(client_socket,log_file, fake_ip)).start()
        
        # Make sure to test for eveyrthing from project 1
