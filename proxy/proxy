#!/usr/bin/env python3
import threading
from socket import *
import sys
import re
import time    
import struct
import traceback

def parse_dns_response(data):
    domain_start = 12  
    # Parse the domain name
    while True:
        length = data[domain_start]
        if length == 0: 
            break
        domain_start += 1
        domain_start += length

    question_end = domain_start + 1 + 4  
    answer_start = question_end
    answer_start += 10
    rdlength = int.from_bytes(data[answer_start:answer_start + 2], byteorder='big')
    answer_start += 2
    ip_address_bytes = data[answer_start:answer_start + rdlength]
    ip_address = '.'.join(map(str, ip_address_bytes))  

    return ip_address


def encode_domain_name(domain_name):
    labels = domain_name.split('.')
    encoded_name = b''
    for label in labels:
        encoded_name += bytes([len(label)]) + label.encode('utf-8')
    return encoded_name + b'\x00' 

def construct_dns_request(domain_name):
    # header
    id = 1234
    flags = 0x0100
    questions = 1
    answers = 0
    authority = 0
    additional = 0
    header = struct.pack('!HHHHHH', id, flags, questions, answers, authority, additional)
    
    # questiion
    domain = encode_domain_name(domain_name)
    q_type = 1
    q_class = 1
    question = domain + struct.pack('!HH', q_type, q_class)
    
    return header + question

def getIpFromDNS(dns_server_port, dns_server_ip):
    dns_server = socket(AF_INET, SOCK_DGRAM)
    dns_server.connect((dns_server_ip, dns_server_port))
    dns_server.sendall(construct_dns_request('video.columbia.edu'))
    response = dns_server.recv(512)
    print("recieved response from dns: ", response)
    ip_address = parse_dns_response(response)
    return ip_address

def parse_bandwidths(server_message):
    bitrates = []
    
    parts = server_message.split('bandwidth="')
    
    for part in parts[1:]:
        bitrate = part.split('"')[0]
        bitrates.append(bitrate)
    
    return bitrates
  
def getBitrates(serverSocket):
    # get the manifest file from the server
    # parse the manifest file to get the bitrates
    # return the bitrates
    header = '''GET /BigBuckBunny_6s.mpd HTTP/1.1\r\n\
Host: localhost:50048\r\n\
Connection: keep-alive\r\n\
sec-ch-ua: "Not/A)Brand";v="99", "Google Chrome";v="115", "Chromium";v="115"\r\n\
sec-ch-ua-mobile: ?0\r\n\
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\r\n\
sec-ch-ua-platform: "Linux"\r\n\
Accept: */*\r\n\
Sec-Fetch-Site: same-origin\r\n\
Sec-Fetch-Mode: cors\r\n\
Sec-Fetch-Dest: empty\r\n\
Referer: http://localhost:50048/\r\n\
Accept-Encoding: gzip, deflate, br\r\n\
Accept-Language: en-US,en;q=0.9\r\n\
\r\n'''
    sendMessage(header, serverSocket)
        
    # Receive messages from server and forward to client
    server_message, server_header = receiveMessageServer(serverSocket)
    if not server_message:
        return []
    
    print("parsed bitrates")
    return parse_bandwidths(server_message.decode('utf-8'))
      
def setBitrate(bitrates, t_current):
    # set the bitrate to the highest bitrate that is less than the current throughput
    max_bitrate = 0
    min_bitrate = 10**10
    for bitrate in bitrates:
        bitrate_int = int(bitrate)
        if bitrate_int*1.5 < t_current and bitrate_int > max_bitrate:
            max_bitrate = bitrate_int
        
        if bitrate_int < min_bitrate:
            min_bitrate = bitrate_int
            
    return max_bitrate if max_bitrate != 0 else min(min_bitrate, int(bitrates[0]))
        
def getServerMessageChunkSize(server_message):
    decoded_server_message = server_message.decode('iso-8859-1')
    chunk_size = getStringFromHeader(decoded_server_message, r'Content-Length: (\d+)')
    return chunk_size
  
def getThroughput(downloadTimeEnd, downloadTimeStart, server_message, t_old, alpha):
    chunk_size_bits = int(getServerMessageChunkSize(server_message)) // 8
    duration = downloadTimeEnd - downloadTimeStart
    new_throughput = int(chunk_size_bits) / duration
    t_current = alpha * new_throughput + (1 - alpha) * t_old
    return t_current

def logContents(client_header, server_message, log_file_path, downloadTimeStart, tput, avg_tput, chunk_bitrate, server_ip):
    # <time> <duration> <tput> <avg-tput> <chunk-bitrate> <server-ip> <chunkname>

    try:
        current_time = time.time()
        duration = current_time - downloadTimeStart
        # server_ip = getStringFromHeader(decoded_server_message, r'Host: ([\w\.-]+)')
        chunk_name = getStringFromHeader(client_header, r'GET /(.+?) HTTP')
        chunk_size = getServerMessageChunkSize(server_message)
        
        with open(log_file, "a") as f:
            f.write(f"{current_time} {duration} {tput} {avg_tput} {chunk_bitrate//1000} {server_ip} /{chunk_name}\n")
            f.close()
    except Exception as e: 
        print("Error logging contents:", e)
        # print("Server message:", decoded_server_message)
        # print("header client message:", client_header)

def closeConnections(clientSocket=None, serverSocket=None):
    if clientSocket:
        clientSocket.close()
    if serverSocket:
        serverSocket.close()
    print("Closed connections")
    
def sendMessage(message, socket):
    if isinstance(message, str):
        message = message.encode()
    socket.sendall(message)

def receiveMessageHeader(socket):
    # use a bytearray to store the encoded message
    buffer = bytearray()
    while True:
        chunk = socket.recv(1024)
        if not chunk:
            break
        buffer.extend(chunk)
        # find the end of the header 
        if b'\r\n\r\n' in buffer:
            break
    
    # get the first occurance of the header end and include that in our header message
    header_end = buffer.find(b'\r\n\r\n') + 4
    headers = buffer[:header_end]
    remaining_body = buffer[header_end:]
    
    # decode the headers
    headers_str = headers.decode('iso-8859-1')
            
    return headers_str, remaining_body

def getStringFromHeader(headers, string):
    match = re.search(string, headers, re.IGNORECASE)
    if match:
        return match.group(1)
    return None

def getContentLength(headers):
    match = re.search(r'Content-Length: (\d+)', headers, re.IGNORECASE)
    if match:
        return int(match.group(1))
    return None

def receiveMessageServer(socket):
    headers_str, initial_body = receiveMessageHeader(socket)
    
    # encode the headers 
    response = headers_str.encode('iso-8859-1')
    body = initial_body
    
    content_length = getContentLength(headers_str)
    
    if content_length is not None:
        # Keep receiving until we get the full content length
        remaining = content_length - len(initial_body)
        while remaining > 0:
            chunk = socket.recv(min(remaining, 8192))
            if not chunk:
                break
            body += chunk
            remaining -= len(chunk)
    
   
    # otherwise we have the full messag
    
    # Combine headers and body
    full_response = response + body
    return full_response, response

def runProxy(clientSocket, serverSocket, log_file, alpha, bitrates, server_ip, dns_server_port, dns_server_ip):
    try:
        throughput_count = 0
        throughput_total = 0
        t_current = 0
        bitrate = setBitrate(bitrates, t_current)
        
        while True:
            # Receive message from the client
            header, body = receiveMessageHeader(clientSocket)
            if not header:
                # Don't close connections immediately if header is empty
                continue
            
            # Ensure Connection: keep-alive is set
            if 'Connection:' in header:
                header = re.sub(r'Connection:.*\r\n', 'Connection: keep-alive\r\n', header)
            else:
                # Add keep-alive header if it doesn't exist
                header = header.replace('\r\n\r\n', '\r\nConnection: keep-alive\r\n\r\n')
            
            header = re.sub(r'1006743', f'{bitrate}', header)
            print("client header", header)
            
            # Forward message to server
            downloadTimeStart = time.time()
            sendMessage(header, serverSocket)
        
            # Receive messages from server and forward to client
            server_message, server_header = receiveMessageServer(serverSocket)
            print("server header", server_header)
            if len(server_message) < 2:
                continue  # Don't close connection, just continue waiting
            
            downloadTimeEnd = time.time()
            t_current = getThroughput(downloadTimeEnd, downloadTimeStart, server_message, t_current, alpha)
            throughput_total += t_current
            throughput_count += 1
            
            print(f"Throughput: {t_current} bits/sec")
                
            bitrate = setBitrate(bitrates, t_current)
            
            # Modify server response to include keep-alive
            if isinstance(server_message, bytes):
                server_message = server_message.decode('iso-8859-1')
            if 'Connection:' in server_message:
                server_message = re.sub(r'Connection:.*\r\n', 'Connection: keep-alive\r\n', server_message)
            else:
                server_message = server_message.replace('\r\n\r\n', '\r\nConnection: keep-alive\r\n\r\n')
            if isinstance(server_message, str):
                server_message = server_message.encode('iso-8859-1')
            
            # Forward to client
            sendMessage(server_message, clientSocket)
            logContents(header, server_header, log_file, downloadTimeStart, t_current, 
                       throughput_total / throughput_count, bitrate, server_ip)
            
    except Exception as e:
        print(f"Error in proxy: {e}")
        tb = traceback.extract_tb(e.__traceback__)
        line_number = tb[-1].lineno
        print(f"An error occurred on line {line_number}: {e}")
    finally:
        # Only close connections if there's an actual error
        if e:
            closeConnections(clientSocket, serverSocket)

# Also modify the connectToServer function to set TCP keepalive
def connectToServer(fake_ip, dns_server_port, dns_server_ip):
    server_ip = getIpFromDNS(dns_server_port, dns_server_ip)
    serverSocket = socket(AF_INET, SOCK_STREAM)
    serverSocket.bind((fake_ip, 0))
    
    # Set TCP keepalive options
    serverSocket.setsockopt(SOL_SOCKET, SO_KEEPALIVE, 1)
    # Set TCP keepalive time (seconds)
    # serverSocket.setsockopt(IPPROTO_TCP, TCP_KEEPIDLE, 60)
    # Set TCP keepalive interval (seconds)
    serverSocket.setsockopt(IPPROTO_TCP, TCP_KEEPINTVL, 60)
    # Set TCP keepalive probe count
    serverSocket.setsockopt(IPPROTO_TCP, TCP_KEEPCNT, 5)
    
    serverSocket.connect((server_ip, 80))
    print("Connected to server")
    return serverSocket, server_ip

def handle_client(clientSocket, log_file, fake_ip, alpha, dns_server_port, dns_server_ip):
    try:
        serverSocket, server_ip = connectToServer(fake_ip, dns_server_port, dns_server_ip)
        bitrates = getBitrates(serverSocket)
        runProxy(clientSocket, serverSocket, log_file, alpha, bitrates, server_ip, dns_server_port, dns_server_ip)
        
    except Exception as e:
        print(f"Error handling client: {e}")
        closeConnections(clientSocket)

if __name__ == "__main__":
    if len(sys.argv) != 7:
        print("Usage: python3", sys.argv[0], "<topo_dir>", "<log>", "alpha", "<listen-port>", "<fake-ip>", "<dns-server-port>")
        sys.exit()
        
    topo_dir = str(sys.argv[1])
    log_file = str(sys.argv[2])
    alpha = float(sys.argv[3])
    listen_port = int(sys.argv[4])    
    fake_ip = str(sys.argv[5])
    dns_server_port = int(sys.argv[6])
    print("topo_dir:", topo_dir, "log_file:", log_file, "alpha:", alpha, "listen_port:", listen_port, "fake_ip:", fake_ip, "dns_server_port:", dns_server_port)
    
    topo_dns_file = topo_dir + '/topo' + topo_dir[-1] + ".dns"
    with open(topo_dns_file, "r") as file:
        dns_server_ip = file.read().strip()
    
    proxySocket = socket(AF_INET, SOCK_STREAM)
    proxySocket.bind(("", listen_port))
    proxySocket.listen(5)
    
    # make sure log file is empty and exists
    with open(log_file, "w") as f:
        f.close()
              
    try:
        while True:
            client_socket, client_address = proxySocket.accept()
            print(f"Client connected, starting thread")
            threading.Thread(target=handle_client, args=(client_socket, log_file, fake_ip, alpha, dns_server_port, dns_server_ip)).start()
    except KeyboardInterrupt:
        print("\nShutting down proxy server...")
    finally:
        proxySocket.close()