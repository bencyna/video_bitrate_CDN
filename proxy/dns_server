#!/usr/bin/env python3

import struct
import sys
from socket import *

import struct

import struct

def create_dns_response(data, ip_address):
    domain_name = parse_dns_query(data)
    
    # Construct the response header
    transaction_id = data[:2]
    flags = b'\x81\x80'  # Response, no error (AA=0, RD=0, RA=0, Z=0)
    questions = b'\x00\x01'  # 1 question
    answers = b'\x00\x01'  # 1 answer
    authority = b'\x00\x00'  # 0 authority records
    additional = b'\x00\x00'  # 0 additional records
    header = transaction_id + flags + questions + answers + authority + additional
    
    # Construct the domain name section
    domain_section = domain_name.encode('utf-8') + b'\x00'
    
    # Construct the resource record section
    resource_type = b'\x00\x01'  # Type A (IPv4 address)
    resource_class = b'\x00\x01'  # Class IN (Internet)
    resource_ttl = b'\x00\x00\x00\x00'  # Time to live (0 seconds, no caching)
    resource_length = b'\x00\x04'  # Length of the IPv4 address (4 bytes)
    resource_address = inet_aton(ip_address)
    resource_section = resource_type + resource_class + resource_ttl + resource_length + resource_address
    
    # Combine the header, domain, and resource sections
    response = header + domain_section + resource_section
    
    return response

def parse_dns_query(data):
    domain_start = 12
    domain_end = data.find(b'\x00', domain_start)
    domain_name = data[domain_start:domain_end].decode('utf-8')
    
    return domain_name




if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python3", sys.argv[0], "<topo-dir>", "log", "<listen-port>", "decision-method>")
        sys.exit()
        
    topo_dir = str(sys.argv[1])
    log_file = str(sys.argv[2])
    listen_port = int(sys.argv[3])
    decision_method = str(sys.argv[4])
    ip_addr = "5.0.0.1"
    topo_dns_file = topo_dir + '/topo' + topo_dir[-1] + ".dns"
    topo_servers = topo_dir + '/topo' + topo_dir[-1] + ".servers"
    
    with open(topo_dns_file, "r") as file:
        ip_addr = file.read().strip()
        
    server_ip_responses = []
    with open(topo_servers, "r") as file:
        server_ip_responses = [x for x in file.read().split("\n") if x]
    
    print("topo_dir:", topo_dir, "log_file:", log_file, "listen_port:", listen_port, "decision_method:", decision_method, "ip-addr:", ip_addr)
    
    server_socket = socket(AF_INET, SOCK_DGRAM)
    server_socket.bind((ip_addr, listen_port))
    
    try:
        while True:
            data, client_address = server_socket.recvfrom(512)
            print(f"Received message from {client_address}: {data}")
            response = parse_dns_query(data)
            server_socket.sendto(response.encode("utf-8"), client_address)
            
    except KeyboardInterrupt:
        print("\nServer is shutting down.")
    finally:
        server_socket.close()

    
      
