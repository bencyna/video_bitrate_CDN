#!/usr/bin/env python3

import struct
import sys
from socket import *
import time

def log(decision_method, ip_chosen):
    try:
        current_time = time.time()
        
        with open(log_file, "a") as f:
            f.write(f"{current_time} request-report {decision_method} {ip_chosen} \n")
            f.close()
    except Exception as e: 
        print("Error logging contents:", e)

def getIP(server_ip_responses, decision_method, i):
    if decision_method == "round-robin":
        return server_ip_responses[i % len(server_ip_responses)]
    else:
      # decision is based on fasts response time?
        return server_ip_responses[0]
      
# Resources used for this https://implement-dns.wizardzines.com/book/part_2, https://www.youtube.com/watch?v=zDvPT1shDFg and https://mislove.org/teaching/cs4700/spring11/handouts/project1-primer.pdf
def create_dns_response(data, ip_address):
    domain_name = parse_dns_query(data)
    id = data[:2]  
    flags = b'\x81\x80' 
    questions = b'\x00\x01'  
    answers = b'\x00\x01'  
    authority = b'\x00\x00' 
    additional = b'\x00\x00' 
    
    if domain_name != "video.columbia.edu":    
        return None
    
    header = id + flags + questions + answers + authority + additional

    domain = encode_domain_name(domain_name)
    q_type = b'\x00\x01' 
    q_class = b'\x00\x01' 
    question_section = domain + q_type + q_class

    answer_name = b'\xc0\x0c'  
    ttl = struct.pack('!I', 0)  
    length = b'\x00\x04' 
    addr = inet_aton(ip_address) 
    answer_section = answer_name + q_type + q_class + ttl + length + addr


    response = header + question_section + answer_section

    return response

def parse_dns_query(data):
    domain_start = 12 
    domain_name = []
    while True:
        length = data[domain_start]
        if length == 0: 
            break
        domain_start += 1
        domain_name.append(data[domain_start:domain_start + length].decode('utf-8'))
        domain_start += length
    return '.'.join(domain_name)

def encode_domain_name(domain_name):
    labels = domain_name.split('.')
    encoded_name = b''
    for label in labels:
        encoded_name += bytes([len(label)]) + label.encode('utf-8')
    return encoded_name + b'\x00' 




if __name__ == "__main__":
    if len(sys.argv) != 5:
        print("Usage: python3", sys.argv[0], "<topo-dir>", "<log>", "<listen-port>", "decision-method>")
        sys.exit()
        
    topo_dir = str(sys.argv[1])
    log_file = str(sys.argv[2])
    listen_port = int(sys.argv[3])
    decision_method = str(sys.argv[4])
    dns_ip_addr = "5.0.0.1"
    topo_dns_file = topo_dir + '/topo' + topo_dir[-1] + ".dns"
    topo_servers = topo_dir + '/topo' + topo_dir[-1] + ".servers"
    
    with open(log_file, "w") as f:
        f.close()
    with open(topo_dns_file, "r") as file:
        dns_ip_addr = file.read().strip()
        
    server_ip_responses = []
    with open(topo_servers, "r") as file:
        server_ip_responses = [x for x in file.read().split("\n") if x]
    
    print("topo_dir:", topo_dir, "log_file:", log_file, "listen_port:", listen_port, "decision_method:", decision_method, "dns_ip-addr:", dns_ip_addr)
    
    server_socket = socket(AF_INET, SOCK_DGRAM)
    server_socket.bind((dns_ip_addr, listen_port))
    
    print("server ip address 1: ", server_ip_responses[0])
    i = 0
    try:
        while True:
            data, client_address = server_socket.recvfrom(512)
            print(f"Received message from {client_address}: {data}")
            ip_chosen = getIP(server_ip_responses, decision_method, i)
            response = create_dns_response(data, ip_chosen)
            if response:
                i += 1
                log(decision_method, ip_chosen)
                server_socket.sendto(response, client_address)
            
    except KeyboardInterrupt:
        print("\nServer is shutting down.")
    finally:
        server_socket.close()

    
      
